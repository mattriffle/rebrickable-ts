/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v3/lego/colors/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all Colors.
         * @description Get a list of all Colors.
         */
        get: operations["lego_colors_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/lego/colors/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get details about a specific Color.
         * @description Get details about a specific Color.
         */
        get: operations["lego_colors_read"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/lego/elements/{element_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get details about a specific Element ID.
         * @description Get details about a specific Element ID.
         */
        get: operations["lego_elements_read"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/lego/minifigs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of Minifigs.
         * @description Get a list of Minifigs.
         */
        get: operations["lego_minifigs_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/lego/minifigs/{set_num}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get details for a specific Minifig.
         * @description Get details for a specific Minifig.
         */
        get: operations["lego_minifigs_read"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/lego/minifigs/{set_num}/parts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all Inventory Parts in this Minifig.
         * @description Get a list of all Inventory Parts in this Minifig.
         *
         *     Optional parameter inc_part_details=1 can be used to return additional part fields, the same as for a single part lookup.
         */
        get: operations["lego_minifigs_parts_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/lego/minifigs/{set_num}/sets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of Sets a Minifig has appeared in.
         * @description Get a list of Sets a Minifig has appeared in.
         */
        get: operations["lego_minifigs_sets_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/lego/part_categories/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all Part Categories.
         * @description Get a list of all Part Categories.
         */
        get: operations["lego_part_categories_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/lego/part_categories/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get details about a specific Part Category.
         * @description Get details about a specific Part Category.
         */
        get: operations["lego_part_categories_read"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/lego/parts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of Parts.
         * @description Get a list of Parts.
         *
         *     Optional parameter inc_part_details=1 can be used to return additional fields, the same as for a single part lookup.
         *
         *     The optional part_nums filter parameter should be a comma separated list of part_num without spaces.
         *
         *     Optionally filter by one or more of the below query parameters.
         */
        get: operations["lego_parts_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/lego/parts/{part_num}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get details about a specific Part.
         * @description Get details about a specific Part.
         */
        get: operations["lego_parts_read"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/lego/parts/{part_num}/colors/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all Colors a Part has appeared in.
         * @description Get a list of all Colors a Part has appeared in.
         */
        get: operations["lego_parts_colors_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/lego/parts/{part_num}/colors/{color_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get details about a specific Part/Color combination.
         * @description Get details about a specific Part/Color combination.
         */
        get: operations["lego_parts_colors_read"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/lego/parts/{part_num}/colors/{color_id}/sets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all Sets the Part/Color combination has appeard in.
         * @description Get a list of all Sets the Part/Color combination has appeard in.
         */
        get: operations["lego_parts_colors_sets_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/lego/sets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of Sets, optionally filtered by any of the below parameters.
         * @description Get a list of Sets, optionally filtered by any of the below parameters.
         */
        get: operations["lego_sets_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/lego/sets/{set_num}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get details for a specific Set.
         * @description Get details for a specific Set.
         */
        get: operations["lego_sets_read"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/lego/sets/{set_num}/alternates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of MOCs which are Alternate Builds of a specific Set - i.e. all parts in the MOC can
         * @description Get a list of MOCs which are Alternate Builds of a specific Set - i.e. all parts in the MOC can
         *     be found in the Set.
         */
        get: operations["lego_sets_alternates_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/lego/sets/{set_num}/minifigs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all Inventory Minifigs in this Set.
         * @description Get a list of all Inventory Minifigs in this Set.
         */
        get: operations["lego_sets_minifigs_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/lego/sets/{set_num}/parts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all Inventory Parts in this Set.
         * @description Get a list of all Inventory Parts in this Set.
         *
         *     Optional parameter inc_part_details=1 can be used to return additional part fields, the same as for a single part lookup.
         *     Optional parameter inc_minifig_parts=1 can be used to include minifig parts in this call.
         *     Optional parameter inc_color_details=0 can be used to prevent color field expansion and reduce response sizes.
         */
        get: operations["lego_sets_parts_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/lego/sets/{set_num}/sets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all Inventory Sets in this Set.
         * @description Get a list of all Inventory Sets in this Set.
         */
        get: operations["lego_sets_sets_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/lego/themes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return all Themes
         * @description Return all Themes
         */
        get: operations["lego_themes_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/lego/themes/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return details for a specific Theme
         * @description Return details for a specific Theme
         */
        get: operations["lego_themes_read"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/swagger/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["swagger_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/users/_token/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate a User Token to be used for authorising user account actions in subsequent calls. Username can be either
         * @description Generate a User Token to be used for authorising user account actions in subsequent calls. Username can be either
         *      the actual username or the user's email address.
         */
        post: operations["users__token_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/users/badges/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all the available Badges
         * @description Get a list of all the available Badges
         */
        get: operations["users_badges_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/users/badges/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get details about a specific Badge
         * @description Get details about a specific Badge
         */
        get: operations["users_badges_read"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/users/{user_token}/allparts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all the Parts in all the user's Part Lists as well as the Parts inside Sets in the user's Set Lists.
         * @description Get a list of all the Parts in all the user's Part Lists as well as the Parts inside Sets in the user's Set Lists.
         *
         *     ###WARNING this call is very resource intensive, do not overuse it!
         *
         *     Optionally, filter by one or more of the below query parameters.
         */
        get: operations["users_allparts_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/users/{user_token}/build/{set_num}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find out how many parts the user needs to build the specified Set.
         * @description Find out how many parts the user needs to build the specified Set.
         *
         *     The user's default Build Settings will be used to calculate a Build Match % using their LEGO Collection of Sets
         *     and Parts.
         */
        get: operations["users_build_read"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/users/{user_token}/lost_parts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all the Lost Parts from the user's LEGO collection.
         * @description Get a list of all the Lost Parts from the user's LEGO collection.
         *
         *     Optionally, filter by one or more of the below query parameters.
         */
        get: operations["users_lost_parts_list"];
        put?: never;
        /**
         * Add one or more Lost Parts to the user.
         * @description Add one or more Lost Parts to the user.
         *
         *     ### Single Part
         *     When adding a single Part, returns the successfully created Part (status 201) or details for why the Part could not
         *     be added.
         *     ### Multiple Parts
         *     To add multiple Parts, POST a JSON list of them (using a Content-Type header of 'application/json'). The inv_part_id
         *     field can be retrieved from the Set's inventory.
         *     e.g:
         *     `[{"inv_part_id": 806698, "lost_quantity": 3},
         *       {"inv_part_id": 256007, "lost_quantity": 2}]`
         *     Returns a list of successfully added Parts. If the Part already exists or is unrecognised, it will be skipped.
         */
        post: operations["users_lost_parts_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/users/{user_token}/lost_parts/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove the Lost Part from the user.
         * @description Remove the Lost Part from the user.
         */
        delete: operations["users_lost_parts_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/users/{user_token}/minifigs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all the Minifigs in all the user's Sets. Note that this is a read-only list as Minifigs are
         * @description Get a list of all the Minifigs in all the user's Sets. Note that this is a read-only list as Minifigs are
         *     automatically determined by the Sets in the user's Set Lists.
         *
         *     Minifigs that were manually added to Set Lists can be retrieved via the
         *     GET /api/v3/users/{user_token}/sets/ endpoint.
         *
         *     Optionally, filter by one or more of the below query parameters.
         */
        get: operations["users_minifigs_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/users/{user_token}/partlists/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all the user's Part Lists.
         * @description Get a list of all the user's Part Lists.
         */
        get: operations["users_partlists_list"];
        put?: never;
        /**
         * Add a new Part List.
         * @description Add a new Part List.
         */
        post: operations["users_partlists_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/users/{user_token}/partlists/{list_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get details about a specific Part List.
         * @description Get details about a specific Part List.
         */
        get: operations["users_partlists_read"];
        /**
         * Replace an existing Part List's details.
         * @description Replace an existing Part List's details.
         */
        put: operations["users_partlists_update"];
        post?: never;
        /**
         * Delete a Part List and all it's Parts.
         * @description Delete a Part List and all it's Parts.
         */
        delete: operations["users_partlists_delete"];
        options?: never;
        head?: never;
        /**
         * Update an existing Part List's details.
         * @description Update an existing Part List's details.
         */
        patch: operations["users_partlists_partial_update"];
        trace?: never;
    };
    "/api/v3/users/{user_token}/partlists/{list_id}/parts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all the Parts in a specific Part List.
         * @description Get a list of all the Parts in a specific Part List.
         *
         *     Optional parameter inc_part_details=1 can be used to return additional part fields, the same as for a single part lookup.
         *     Optional parameter inc_color_details=0 can be used to prevent color field expansion and reduce response sizes.
         */
        get: operations["users_partlists_parts_list"];
        put?: never;
        /**
         * Add one or more Parts to the Part List.
         * @description Add one or more Parts to the Part List.
         *
         *     ### Single Part
         *     When adding a single Part, returns the successfully created Part (status 201) or details for why the Part could not
         *     be added.
         *     ### Multiple Parts
         *     To add multiple Parts, POST a JSON list of them (using a Content-Type header of 'application/json').
         *     e.g:
         *     `[{"part_num":"3001", "color_id": 1, "quantity": 10},
         *      {"part_num":"3001", "color_id": 2, "quantity": 20},
         *      {"part_num":"3002", "color_id": 14, "quantity": 30}]`
         *     Returns a list of successfully added Parts. If the Part already exists or is unrecognised, it will be skipped.
         */
        post: operations["users_partlists_parts_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/users/{user_token}/partlists/{list_id}/parts/{part_num}/{color_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get details about a specific Part in the Part List.
         * @description Get details about a specific Part in the Part List.
         */
        get: operations["users_partlists_parts_read"];
        /**
         * Replace an existing Part's details in the Part List.
         * @description Replace an existing Part's details in the Part List.
         */
        put: operations["users_partlists_parts_update"];
        post?: never;
        /**
         * Delete a Part from the Part List.
         * @description Delete a Part from the Part List.
         */
        delete: operations["users_partlists_parts_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/users/{user_token}/parts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all the Parts in all the user's Part Lists.
         * @description Get a list of all the Parts in all the user's Part Lists.
         *
         *     Optional parameter inc_part_details=1 can be used to return additional part fields, the same as for a single part lookup.
         *
         *     ###Set List logic
         *     Parts appearing in multiple Part Lists will be listed multiple times.
         *
         *     Optionally, filter by one or more of the below query parameters.
         */
        get: operations["users_parts_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/users/{user_token}/profile/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get details about a specific user.
         * @description Get details about a specific user.
         */
        get: operations["users_profile_read"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/users/{user_token}/setlists/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all the user's Set Lists.
         * @description Get a list of all the user's Set Lists.
         */
        get: operations["users_setlists_list"];
        put?: never;
        /**
         * Add a new Set List.
         * @description Add a new Set List.
         */
        post: operations["users_setlists_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/users/{user_token}/setlists/{list_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get details about a specific Set List.
         * @description Get details about a specific Set List.
         */
        get: operations["users_setlists_read"];
        /**
         * Replace an existing Set List's details.
         * @description Replace an existing Set List's details.
         */
        put: operations["users_setlists_update"];
        post?: never;
        /**
         * Delete a Set List and all it's Sets.
         * @description Delete a Set List and all it's Sets.
         */
        delete: operations["users_setlists_delete"];
        options?: never;
        head?: never;
        /**
         * Update an existing Set List's details.
         * @description Update an existing Set List's details.
         */
        patch: operations["users_setlists_partial_update"];
        trace?: never;
    };
    "/api/v3/users/{user_token}/setlists/{list_id}/sets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all the Sets in a specific Set List.
         * @description Get a list of all the Sets in a specific Set List.
         */
        get: operations["users_setlists_sets_list"];
        put?: never;
        /**
         * Add one or more Sets to the Set List. Existing Sets are unaffected.
         * @description Add one or more Sets to the Set List. Existing Sets are unaffected.
         *
         *     ### Single Set
         *     When adding a single Set, returns the successfully created Set (status 201) or details for why the Set could not
         *     be added.
         *     ### Multiple Sets
         *     To add multiple Sets, POST a JSON list of them (using a Content-Type header of 'application/json').
         *     e.g:
         *     `[{"set_num":"8043-1", "quantity": 1},
         *      {"set_num":"8110-1", "quantity": 2, "include_spares": "False"}]`
         *     Returns a list of successfully added Sets. If the Set already exists or is unrecognised, it will be skipped.
         */
        post: operations["users_setlists_sets_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/users/{user_token}/setlists/{list_id}/sets/{set_num}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get details about a specific Set in the Set List.
         * @description Get details about a specific Set in the Set List.
         */
        get: operations["users_setlists_sets_read"];
        /**
         * Replace an existing Set's details in the Set List.
         * @description Replace an existing Set's details in the Set List.
         */
        put: operations["users_setlists_sets_update"];
        post?: never;
        /**
         * Delete a Set from the Set List.
         * @description Delete a Set from the Set List.
         */
        delete: operations["users_setlists_sets_delete"];
        options?: never;
        head?: never;
        /**
         * Update an existing Set's details in the Set List.
         * @description Update an existing Set's details in the Set List.
         */
        patch: operations["users_setlists_sets_partial_update"];
        trace?: never;
    };
    "/api/v3/users/{user_token}/sets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all the Sets in the user's LEGO collection.
         * @description Get a list of all the Sets in the user's LEGO collection.
         *
         *     ### Set List logic
         *     Sets appearing in multiple Set Lists will be listed multiple times.
         *
         *     Optionally, filter by one or more of the below query parameters.
         */
        get: operations["users_sets_list"];
        put?: never;
        /**
         * Add one or more Sets to the user's LEGO collection. Existing Sets are unaffected.
         * @description Add one or more Sets to the user's LEGO collection. Existing Sets are unaffected.
         *
         *     ### Set List logic
         *     The Set List used when adding sets is chosen in the following order:
         *     1. If no Set Lists exist, one will be created and used
         *     2. User's configured default Set List for Imports
         *     3. The first Set List alphabetically
         *
         *     ### Single Set
         *     When adding a single Set, returns the successfully created Set (status 201) or details for why the Set could not
         *     be added.
         *     ### Multiple Sets
         *     To add multiple Sets, POST a JSON list of them (using a Content-Type header of 'application/json').
         *     e.g:
         *     `[{"set_num":"8043-1", "quantity": 1},
         *      {"set_num":"8110-1", "quantity": 2, "include_spares": "False"}]`
         *     Returns a list of successfully added Sets. If the Set already exists or is unrecognised, it will be skipped.
         */
        post: operations["users_sets_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/users/{user_token}/sets/sync/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Synchronise a user's Sets to the POSTed list.
         * @description Synchronise a user's Sets to the POSTed list.
         *
         *     ### Set List logic
         *     This is used to completely replace the user's Sets with those in the supplied list.
         *     It will remove any Sets in Rebrickable that are not found in the supplied list.
         *     It will attempt to keep any current Rebrickable Sets in their existing Set Lists, and will add any new Sets
         *     found into the Default Set List for Imports in the user's settings.
         *     ### Single Set
         *     When adding a single Set, returns the successfully created Set (status 201) or details for why the Set could not
         *     be added.
         *     ### Multiple Sets
         *     To add multiple Sets, POST a JSON list of them (using a Content-Type header of 'application/json').
         *     e.g:
         *     `[{"set_num":"8043-1", "quantity": 1},
         *      {"set_num":"8110-1", "quantity": 2, "include_spares": "False"}]`
         *     Returns a list of successfully added Sets. If the Set is unrecognised, it will be skipped.
         */
        post: operations["users_sets_sync_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/users/{user_token}/sets/{set_num}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get details about a specific Set in the user's LEGO collection.
         * @description Get details about a specific Set in the user's LEGO collection.
         *
         *     ### Set List logic
         *     Because this merges sets found across all Set Lists the fields list_id and include_spares may not be
         *     accurate unless the Set actually only exists in a single Set List.
         */
        get: operations["users_sets_read"];
        /**
         * Update an existing Set's quantity in all Set Lists. This PUT call is different to others in that it will create
         * @description Update an existing Set's quantity in all Set Lists. This PUT call is different to others in that it will create
         *     the Set if it doesn't already exist, and it will delete the Set if you pass a quantity of 0.
         *
         *     ### Set List logic
         *     * Default Set List = user's configured default import list or the first alphabetically if none exist.
         *     * Increasing quantity = add to Set in default Set List if it exists, else add it there
         *     * Decreasing quantity = remove from Set in default Set List first, then from remaining lists until done
         */
        put: operations["users_sets_update"];
        post?: never;
        /**
         * Delete the Set from all the user's Set Lists.
         * @description Delete the Set from all the user's Set Lists.
         */
        delete: operations["users_sets_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: {
        users_setlists_sets_create: {
            content: {
                "application/x-www-form-urlencoded": {
                    set_num: string;
                    quantity?: number;
                    include_spares?: boolean;
                };
            };
        };
        users_setlists_create: {
            content: {
                "application/x-www-form-urlencoded": {
                    is_buildable?: boolean;
                    name: string;
                    num_sets?: number;
                };
            };
        };
        users_setlists_sets_update: {
            content: {
                "application/x-www-form-urlencoded": {
                    quantity?: number;
                    include_spares?: boolean;
                };
            };
        };
        users_partlists_create: {
            content: {
                "application/x-www-form-urlencoded": {
                    is_buildable?: boolean;
                    name: string;
                    num_parts?: number;
                };
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    lego_colors_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    lego_colors_read: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header?: never;
            path: {
                /** @description A unique value identifying this color. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    lego_elements_read: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                element_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    lego_minifigs_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                min_parts?: number;
                max_parts?: number;
                in_set_num?: string;
                in_theme_id?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    lego_minifigs_read: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                set_num: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    lego_minifigs_parts_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path: {
                set_num: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    lego_minifigs_sets_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header?: never;
            path: {
                set_num: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    lego_part_categories_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    lego_part_categories_read: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this part category. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    lego_parts_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                part_num?: string;
                part_nums?: string;
                part_cat_id?: string;
                color_id?: string;
                bricklink_id?: string;
                brickowl_id?: string;
                lego_id?: string;
                ldraw_id?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    lego_parts_read: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                part_num: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    lego_parts_colors_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header?: never;
            path: {
                part_num: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    lego_parts_colors_read: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                color_id: string;
                part_num: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    lego_parts_colors_sets_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header?: never;
            path: {
                color_id: string;
                part_num: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    lego_sets_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                theme_id?: string;
                min_year?: number;
                max_year?: number;
                min_parts?: number;
                max_parts?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    lego_sets_read: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                set_num: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    lego_sets_alternates_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header?: never;
            path: {
                set_num: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    lego_sets_minifigs_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path: {
                set_num: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    lego_sets_parts_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path: {
                set_num: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    lego_sets_sets_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path: {
                set_num: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    lego_themes_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    lego_themes_read: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this theme. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    swagger_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users__token_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Username (or email) of user */
                    username: string;
                    /** @description Password of user */
                    password: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_badges_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_badges_read: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this badge. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_allparts_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                part_num?: string;
                part_cat_id?: number;
                color_id?: number;
            };
            header?: never;
            path: {
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_build_read: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                set_num: string;
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_lost_parts_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header?: never;
            path: {
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_lost_parts_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    lost_quantity?: number;
                    inv_part_id: number;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_lost_parts_delete: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header?: never;
            path: {
                id: string;
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_minifigs_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                fig_set_num?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path: {
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_partlists_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path: {
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_partlists_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["users_partlists_create"];
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_partlists_read: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                list_id: string;
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_partlists_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                list_id: string;
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["users_partlists_create"];
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_partlists_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                list_id: string;
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_partlists_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                list_id: string;
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    is_buildable?: boolean;
                    name?: string;
                    num_parts?: number;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_partlists_parts_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header?: never;
            path: {
                list_id: string;
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_partlists_parts_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                list_id: string;
                user_token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    part_num: string;
                    quantity: number;
                    color_id: number;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_partlists_parts_read: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header?: never;
            path: {
                part_num: string;
                color_id: string;
                list_id: string;
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_partlists_parts_update: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header?: never;
            path: {
                part_num: string;
                color_id: string;
                list_id: string;
                user_token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    quantity: number;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_partlists_parts_delete: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header?: never;
            path: {
                part_num: string;
                color_id: string;
                list_id: string;
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_parts_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                part_num?: string;
                part_cat_id?: number;
                color_id?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path: {
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_profile_read: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_setlists_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path: {
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_setlists_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["users_setlists_create"];
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_setlists_read: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                list_id: string;
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_setlists_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                list_id: string;
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["users_setlists_create"];
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_setlists_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                list_id: string;
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_setlists_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                list_id: string;
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    is_buildable?: boolean;
                    name?: string;
                    num_sets?: number;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_setlists_sets_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header?: never;
            path: {
                list_id: string;
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_setlists_sets_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                list_id: string;
                user_token: string;
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["users_setlists_sets_create"];
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_setlists_sets_read: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header?: never;
            path: {
                set_num: string;
                list_id: string;
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_setlists_sets_update: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header?: never;
            path: {
                set_num: string;
                list_id: string;
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["users_setlists_sets_update"];
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_setlists_sets_delete: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header?: never;
            path: {
                set_num: string;
                list_id: string;
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_setlists_sets_partial_update: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header?: never;
            path: {
                set_num: string;
                list_id: string;
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["users_setlists_sets_update"];
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_sets_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                set_num?: string;
                theme_id?: number;
                min_year?: number;
                max_year?: number;
                min_parts?: number;
                max_parts?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path: {
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_sets_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_token: string;
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["users_setlists_sets_create"];
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_sets_sync_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    quantity?: number;
                    include_spares?: boolean;
                    set_num: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_sets_read: {
        parameters: {
            query?: {
                set_num?: string;
                theme_id?: number;
                min_year?: number;
                max_year?: number;
                min_parts?: number;
                max_parts?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path: {
                set_num: string;
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_sets_update: {
        parameters: {
            query?: {
                set_num?: string;
                theme_id?: number;
                min_year?: number;
                max_year?: number;
                min_parts?: number;
                max_parts?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path: {
                set_num: string;
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    quantity?: number;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_sets_delete: {
        parameters: {
            query?: {
                set_num?: string;
                theme_id?: number;
                min_year?: number;
                max_year?: number;
                min_parts?: number;
                max_parts?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path: {
                set_num: string;
                user_token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
